Description: Don't save failsafe session in .dmrc. "Failsafe" means either failsafe in session name or in session comment (case unsensitive)
Bug: https://bugzilla.gnome.org/show_bug.cgi?id=607703
Bug-Ubuntu: https://launchpad.net/bugs/509182

Index: gdm-3.0.0/daemon/gdm-session-direct.c
===================================================================
--- gdm-3.0.0.orig/daemon/gdm-session-direct.c	2011-06-07 11:15:40.317629201 +0200
+++ gdm-3.0.0/daemon/gdm-session-direct.c	2011-06-07 11:17:21.647629249 +0200
@@ -175,6 +175,32 @@
 }
 
 static void
+send_dbus_bool_signal (GdmSessionDirect *session,
+                       const char *name,
+                       const gboolean value)
+{
+        DBusMessage    *message;
+        DBusMessageIter iter;
+
+        g_return_if_fail (session != NULL);
+
+        message = dbus_message_new_signal (GDM_SESSION_DBUS_PATH,
+                                           GDM_SESSION_DBUS_INTERFACE,
+                                           name);
+
+        dbus_message_iter_init_append (message, &iter);
+        dbus_message_iter_append_basic (&iter, DBUS_TYPE_BOOLEAN, &value);
+
+        if (! send_dbus_message (session->priv->worker_connection, message)) {
+                g_debug ("GdmSessionDirect: Could not send %s signal",
+                         name ? name : "(null)");
+        }
+
+         dbus_message_unref (message);
+}
+
+
+static void
 send_dbus_void_signal (GdmSessionDirect *session,
                        const char       *name)
 {
@@ -605,6 +631,61 @@
         return res;
 }
 
+static gboolean
+get_session_comment_for_file (const char *file,
+                              char      **comment)
+{
+        GKeyFile   *key_file;
+        GError     *error;
+        char       *full_path;
+        gboolean    ret;
+        gboolean    res;
+
+        ret = FALSE;
+        if (comment != NULL) {
+                *comment = NULL;
+        }
+
+        key_file = g_key_file_new ();
+
+        g_debug ("GdmSessionDirect: looking for session file '%s'", file);
+
+        error = NULL;
+        full_path = NULL;
+        res = g_key_file_load_from_dirs (key_file,
+                                         file,
+                                         get_system_session_dirs (),
+                                         &full_path,
+                                         G_KEY_FILE_NONE,
+                                         &error);
+        if (! res) {
+                g_debug ("GdmSessionDirect: File '%s' not found: %s", file, error->message);
+                g_error_free (error);
+                if (comment != NULL) {
+                        *comment = NULL;
+                }
+                goto out;
+        }
+
+        error = NULL;
+        *comment = g_key_file_get_string (key_file,
+                                      G_KEY_FILE_DESKTOP_GROUP,
+                                      "Comment",
+                                      &error);
+        if (error != NULL) {
+                g_debug ("GdmSessionDirect: %s key not found: %s",
+                         "Comment",
+                         error->message);
+                g_error_free (error);
+                goto out;
+        }
+
+        ret = TRUE;
+
+out:
+        return ret;
+}
+
 static const char *
 get_default_language_name (GdmSessionDirect *session)
 {
@@ -1373,6 +1454,9 @@
                                "    <signal name=\"SetSessionName\">\n"
                                "      <arg name=\"session_name\" type=\"s\"/>\n"
                                "    </signal>\n"
+                               "    <signal name=\"SetIsFailsafe\">\n"
+                               "      <arg name=\"is_failsafe\" type=\"i\"/>\n"
+                               "    </signal>\n"
                                "    <signal name=\"StartProgram\">\n"
                                "      <arg name=\"command\" type=\"s\"/>\n"
                                "    </signal>\n"
@@ -1949,6 +2033,32 @@
         return get_default_session_name (session);
 }
 
+static gboolean
+get_is_session_failsafe (GdmSessionDirect *session)
+{
+        gboolean res;
+        char    *comment;
+        char    *filename;
+        char    *p;
+
+        filename = g_strdup_printf ("%s.desktop", get_session_name (session));
+
+        comment = NULL;
+        res = get_session_comment_for_file (filename, &comment);
+        if (! res) {
+                g_warning ("Cannot read specified session file: %s", filename);
+                g_free (filename);
+                return FALSE;
+        }
+        g_free (filename);
+
+        p = strstr(g_ascii_strdown (comment, -1), "failsafe") || strstr(g_ascii_strdown (filename, -1), "failsafe");
+        if (p != NULL)
+                return TRUE;
+
+        return FALSE;
+}
+
 static char *
 get_session_command (GdmSessionDirect *session)
 {
@@ -2211,6 +2321,9 @@
 
         send_dbus_string_signal (impl, "SetSessionName",
                                  get_session_name (impl));
+
+        send_dbus_bool_signal (impl, "SetIsFailsafe",
+                                 get_is_session_failsafe(impl));
 }
 
 static void
Index: gdm-3.0.0/daemon/gdm-session-settings.c
===================================================================
--- gdm-3.0.0.orig/daemon/gdm-session-settings.c	2011-04-04 16:37:16.000000000 +0200
+++ gdm-3.0.0/daemon/gdm-session-settings.c	2011-06-07 11:15:40.487629201 +0200
@@ -40,6 +40,7 @@
         ActUser *user;
         char *session_name;
         char *language_name;
+        gboolean failsafe;
 };
 
 static void gdm_session_settings_finalize (GObject *object);
@@ -59,6 +60,7 @@
         PROP_0 = 0,
         PROP_SESSION_NAME,
         PROP_LANGUAGE_NAME,
+        PROP_IS_FAILSAFE,
         PROP_IS_LOADED
 };
 
@@ -99,6 +101,12 @@
                                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY);
         g_object_class_install_property (object_class, PROP_LANGUAGE_NAME, param_spec);
 
+        param_spec = g_param_spec_string ("is-failsafe", "Failsafe Session",
+                                        "Whether the session is a failsafe one",
+                                        NULL,
+                                       G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY);
+        g_object_class_install_property (object_class, PROP_IS_FAILSAFE, param_spec);
+
         param_spec = g_param_spec_boolean ("is-loaded", NULL, NULL,
                                            FALSE, G_PARAM_READABLE);
         g_object_class_install_property (object_class, PROP_IS_LOADED, param_spec);
@@ -163,6 +171,18 @@
         }
 }
 
+void
+gdm_session_settings_set_is_failsafe (GdmSessionSettings *settings,
+                                      gboolean            failsafe)
+{
+        g_return_if_fail (GDM_IS_SESSION_SETTINGS (settings));
+
+        if (settings->priv->failsafe != failsafe) {
+                settings->priv->failsafe = failsafe;
+                g_object_notify (G_OBJECT (settings), "is-failsafe");
+        }
+}
+
 char *
 gdm_session_settings_get_language_name (GdmSessionSettings *settings)
 {
@@ -177,6 +197,13 @@
         return g_strdup (settings->priv->session_name);
 }
 
+gboolean
+gdm_session_settings_get_is_failsafe (GdmSessionSettings *settings)
+{
+        g_return_val_if_fail (GDM_IS_SESSION_SETTINGS (settings), FALSE);
+        return settings->priv->failsafe;
+}
+
 static void
 gdm_session_settings_set_property (GObject      *object,
                                   guint         prop_id,
@@ -196,6 +223,10 @@
                         gdm_session_settings_set_session_name (settings, g_value_get_string (value));
                 break;
 
+                case PROP_IS_FAILSAFE:
+                        gdm_session_settings_set_is_failsafe (settings, g_value_get_boolean (value));
+                break;
+
                 default:
                         G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
         }
@@ -220,6 +251,10 @@
                         g_value_set_string (value, settings->priv->language_name);
                 break;
 
+                case PROP_IS_FAILSAFE:
+                        g_value_set_boolean (value, settings->priv->failsafe);
+                break;
+
                 case PROP_IS_LOADED:
                         g_value_set_boolean (value, gdm_session_settings_is_loaded (settings));
                 break;
@@ -275,6 +310,8 @@
                 gdm_session_settings_set_language_name (settings, language_name);
         }
 
+        gdm_session_settings_set_is_failsafe (settings, FALSE);
+
         g_object_notify (G_OBJECT (settings), "is-loaded");
 }
 
@@ -344,6 +381,8 @@
         user = act_user_manager_get_user (settings->priv->user_manager,
                                           username);
 
+        if (settings->priv->failsafe) 
+                return TRUE;
 
         if (!act_user_is_loaded (user)) {
                 g_object_unref (user);
Index: gdm-3.0.0/daemon/gdm-session-settings.h
===================================================================
--- gdm-3.0.0.orig/daemon/gdm-session-settings.h	2011-04-04 16:37:16.000000000 +0200
+++ gdm-3.0.0/daemon/gdm-session-settings.h	2011-06-07 11:15:40.497629201 +0200
@@ -60,10 +60,13 @@
 gboolean            gdm_session_settings_is_loaded          (GdmSessionSettings  *settings);
 char               *gdm_session_settings_get_language_name  (GdmSessionSettings *settings);
 char               *gdm_session_settings_get_session_name   (GdmSessionSettings *settings);
+gboolean            gdm_session_settings_get_is_failsafe    (GdmSessionSettings *settings);
 void                gdm_session_settings_set_language_name  (GdmSessionSettings *settings,
                                                              const char         *language_name);
 void                gdm_session_settings_set_session_name   (GdmSessionSettings *settings,
                                                              const char         *session_name);
+void                gdm_session_settings_set_is_failsafe    (GdmSessionSettings *settings,
+                                                             gboolean           is_failsafe);
 
 G_END_DECLS
 #endif /* GDM_SESSION_SETTINGS_H */
Index: gdm-3.0.0/daemon/gdm-session-worker.c
===================================================================
--- gdm-3.0.0.orig/daemon/gdm-session-worker.c	2011-04-04 16:37:16.000000000 +0200
+++ gdm-3.0.0/daemon/gdm-session-worker.c	2011-06-07 11:15:40.497629201 +0200
@@ -1899,6 +1899,14 @@
 }
 
 static void
+gdm_session_worker_set_is_failsafe (GdmSessionWorker *worker,
+                                    gboolean         is_failsafe)
+{
+        gdm_session_settings_set_is_failsafe (worker->priv->user_settings,
+                                              is_failsafe);
+}
+
+static void
 on_set_session_name (GdmSessionWorker *worker,
                      DBusMessage      *message)
 {
@@ -1921,6 +1929,28 @@
 }
 
 static void
+on_set_is_session_failsafe (GdmSessionWorker *worker,
+                            DBusMessage      *message)
+{
+        DBusError   error;
+        const gboolean is_failsafe;
+        dbus_bool_t res;
+
+        dbus_error_init (&error);
+        res = dbus_message_get_args (message,
+                                     &error,
+                                     DBUS_TYPE_BOOLEAN, &is_failsafe,
+                                     DBUS_TYPE_INVALID);
+        if (res) {
+                g_debug ("GdmSessionWorker: is_failsafe for this session set to %i", is_failsafe);
+                gdm_session_worker_set_is_failsafe (worker, is_failsafe);
+        } else {
+                g_warning ("Unable to get arguments: %s", error.message);
+                dbus_error_free (&error);
+        }
+}
+
+static void
 gdm_session_worker_set_language_name (GdmSessionWorker *worker,
                                       const char       *language_name)
 {
@@ -2552,6 +2582,8 @@
                 on_set_language_name (worker, message);
         } else if (dbus_message_is_signal (message, GDM_SESSION_DBUS_INTERFACE, "SetSessionName")) {
                 on_set_session_name (worker, message);
+        } else if (dbus_message_is_signal (message, GDM_SESSION_DBUS_INTERFACE, "SetIsFailsafe")) {
+                on_set_is_session_failsafe (worker, message);
         } else {
                 return DBUS_HANDLER_RESULT_NOT_YET_HANDLED;
         }
